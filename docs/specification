class Text:
    property:
        string

        string clean 

        string title


    Text(string)

    method:
        preprocessing()
            1. (), [1]
        sentence_extractor()
            return [Sentence1, Sentence2, ...]



class Sentence:
    property:
        string content
        int pose_in_text
        string context

        string content_resolved

        list pos_tag[]

        string number

        Entity subject

        Predicate predicate

    method:
        get_context()
            obtain sentence1-snetence_k from text.clean
            self.context = sentence1 + sentence2 + ... + sentence_k

        coreference_resolution()  #neuralCoref
            self.string2 = 

        extract_subject(string title)  # extract subject
            
            '''
            extract all Ns 
            if (title in Ns -> sim > 0.8)
                s = title
            else
                s = spacy 'nsubj'
            ''' 
            self.subject

        extract_predicate()
            self.predicate

            '''
            stanford Open IE -> [triple1, triple2, ...]
            if (sim(extract出的subject和triple中的subject) > \beta and 该triple中的object带数字)
                p＝triple中的predicate
            else
                - rule 1: (p) of number 
                - rule 2: number + in + N
                - rule 3: number + 单位 + adj 
                - rule 4: 和subject最接近的N
            '''



class Subject:

    property:
        string


        raw_candidate[string1, string1, ...]: wordnet 
            - top-2 

        candidate_in_kg[(string1, sim1), (string2, sim2), ...]
            - 2x2 = 4 tuples

    method:
        expand():
            self.raw_candidate

        map():
            self.candidate_in_kg 
                - map all to DBpedia (semantic based) 


class Predicate:
    property:
        string

        

        raw_candidate[string1, string2, ...]: wordnet 
            - top-2

        candidate_in_kg[(string1, sim1), (string2, sim2), ...]
            - 2 * 2=4 tuples

    method:
        expand():
            self.raw_candidate
        map():
            self.candidate_to_kg (string based)
                - map all to DBpedia 

SPARQL_construction(subjects, predicates):
    '''the input subjects/predicates don't contain any urls, we add urls in this function'''
    return 16 SPARQL queries


SPARQL_request(string):
    return answer

