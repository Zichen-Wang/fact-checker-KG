#include <stdio.h>
#include <string.h>
#include <stdlib.h>

struct Node{
    double sim;
    char name[20];  
};

struct Node* heap = (struct Node*) malloc(sizeof(struct Node)*100); // the mininum heap with size K


void adjust(int n, int i) {
    heap[0] = heap[i];  
    i <<= 1;  
    while (i <= n) {  
        if (i < n && heap[i+1].sim < heap[i].sim) {  
            i++;  
        }  
        if (heap[i].sim >= heap[0].sim) {  
            break;  
        }  
        heap[i>>1] = heap[i];  
        i <<= 1;  
    }  
    heap[i>>1] = heap[0];  
}

void init_heap(int n) {
    printf("%s ", "entering init heap");
    int j;
    for (j = 0; j <= 3; j++) {
        heap[j].sim = 1;
    }
    int i;   
    for (i = n / 2; i > 0; i--) {  
        adjust(n, i);  
    }  
}

int min(int x, int y) {
    return x < y ? x : y;
}

int max(int x, int y) {
    return x > y ? x : y;
}

double calc_similarity(const char* given, const char* candidate) {
    int n = strlen(given);
    int m = strlen(candidate);
    int i, j, ret;

    int **f = (int**)malloc((n + 1) * sizeof(int*));
    for (i = 0; i <= n; i++)
        f[i] = (int*)malloc((m + 1) * sizeof(int));

    
    for (i = 0; i <= n; i++)
        f[i][0] = i;
    for (j = 0; j <= m; j++)
        f[0][j] = j;

    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++) {
            if (given[i] == candidate[j])
                f[i + 1][j + 1] = f[i][j];
            else
                f[i + 1][j + 1] = min(f[i + 1][j], min(f[i][j + 1], f[i][j])) + 1;
        }
    
    ret = f[n][m];
    for (i = 0; i <= n; i++)
        free(f[i]);
    free(f);
    return 1 - 1.0 * ret / max(n, m);
}

char* find(const char* given, const char* file_path) {  // find top-k max similarities
    
    int k = 3;
    FILE *fp = fopen(file_path, "r"); 
    char *tmp = (char*)malloc(2000 * sizeof(char));
    int i, j, l;
    double res[300];
    char *ans = (char *)malloc(2000 * sizeof(char));
    printf("%s ", "ready to init heap");

    init_heap(k);  
    while (~fscanf(fp, "%s", tmp)) {
        l = strlen(tmp);
        char *candidate = (char*)malloc((l + 1) * sizeof(char));
        for (i = l - 1; i >= 0; i--)
            if (tmp[i] == '/') {
                for (j = i + 1; j < l - 1; j++) {
                    if (tmp[j] == '_')
                        tmp[j] = ' ';
                    candidate[j - i - 1] = tmp[j];
                }
                candidate[j - i - 1] = 0;
                break;
            }
        double cur = calc_similarity(given, candidate);
        if (cur > heap[1].sim) {  
            heap[1].sim = cur;
            strcpy(heap[1].name, candidate);
            adjust(k, 1);  
        }  
        for (i = 1; i <= k; i++) {  
            printf("%s ", heap[i].name);  
        }  
        free(candidate);
    }
    
    free(tmp);
    free(heap);
    fclose(fp);
    return "abc";
}


